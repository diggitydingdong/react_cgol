{"version":3,"sources":["Grid/Grid.module.scss","Sidebar/Tabs/TabGroup.module.scss","Sidebar/Tabs/TabItem.module.scss","App.module.scss","Sidebar/Sidebar.module.scss","Sidebar/Controls/Controls.tsx","Sidebar/Tabs/TabItem.tsx","Sidebar/Tabs/TabGroup.tsx","Sidebar/Sidebar.tsx","algorithms/Cgol.ts","Grid/Grid.tsx","globals.ts","App.tsx","index.tsx"],"names":["module","exports","classNames","require","Controls","controlFunctions","cn","className","onClick","safeCall","current","advance","undo","clearHistory","reset","randomise","type","func","undefined","TabItem","label","selected","onTabClick","styles","tab_item","TabGroup","tabs","useState","currentTabIdx","setCurrentTabIdx","tab_group","tab_item_row","map","tab","tabIdx","content","Sidebar","controls","isOob","grid","row","col","length","getNext","neighbours","o","neighbourCountGrid","push","m","newRow","Math","floor","newCol","getNeighbourCountGrid","r","Grid","getWindowDimensions","gridDimensions","getInitialGrid","setGrid","currentDrag","setCurrentDrag","gridHistory","useRef","updateCells","cells","currentGrid","newGrid","copyGrid","forEach","cell","updateGrid","advanceGrid","endDrag","prevState","pop","getRandomGrid","handleKeyDown","e","key","useEffect","document","addEventListener","rowIdx","cellValue","colIdx","cellCN","active","dead","onMouseDown","newDrag","handleMouseDown","onMouseUp","onMouseMove","console","log","buttons","handleMouseMove","window","width","innerWidth","height","innerHeight","GRID_MARGIN","dimensions","random","g","a","slice","App","ReactDOM","render","getElementById"],"mappings":"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","file":"static/js/main.3b3dff9f.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"grid\":\"Grid_grid__3zS0Y\",\"row\":\"Grid_row__2U9u8\",\"cell\":\"Grid_cell__wmPYA\",\"dead\":\"Grid_dead__28k7c\",\"active\":\"Grid_active__1k5zB\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"tab_group\":\"TabGroup_tab_group__ZUKwU\",\"tab_item_row\":\"TabGroup_tab_item_row__1H0kf\",\"content\":\"TabGroup_content__nnRsf\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"tab_item\":\"TabItem_tab_item__3vyYE\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"App\":\"App_App__-bWai\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"controls\":\"Sidebar_controls__3VYRj\"};","import React from \"react\";\r\nimport { IControlFunctions } from \"../../globals\";\r\nimport styles from './Controls.module.scss';\r\nvar classNames = require('classnames');\r\n\r\nexport interface ControlsProps {\r\n    controlFunctions: React.MutableRefObject<IControlFunctions>;\r\n}\r\n\r\nexport const Controls: React.FC<ControlsProps> = ({ controlFunctions }) => {\r\n    let cn = classNames();\r\n    \r\n    \r\n\r\n    return <div className={cn}>\r\n        <button onClick={() => safeCall(controlFunctions.current.advance)}>Advance</button>\r\n        \r\n        <button onClick={() => safeCall(controlFunctions.current.undo)}>Undo</button>\r\n        \r\n        <button onClick={() => safeCall(controlFunctions.current.clearHistory)}>Clear History</button>\r\n        \r\n        <button onClick={() => safeCall(controlFunctions.current.reset)}>Reset</button>\r\n\r\n        <button onClick={() => safeCall(controlFunctions.current.randomise)}>Randomise</button>\r\n        <input type=\"checkbox\" />\r\n    </div>\r\n}\r\n\r\nfunction safeCall(func: (() => void) | undefined): void {\r\n    if(func === undefined) return;\r\n    func();\r\n}","import React from \"react\";\r\nimport styles from './TabItem.module.scss';\r\nimport { TabItemProps } from \"./Tabs\";\r\nvar classNames = require('classnames');\r\n\r\nexport const TabItem: React.FC<TabItemProps> = ({ label, selected, onTabClick }) => {\r\n    let cn = classNames(styles.tab_item, { [styles.selected]: selected });\r\n    \r\n    return <div className={cn} onClick={onTabClick ? () => onTabClick() : undefined}>\r\n        {label}\r\n    </div>\r\n}","import React, { useState } from \"react\";\r\nimport styles from './TabGroup.module.scss';\r\nimport { TabItem } from \"./TabItem\";\r\nimport { TabGroupProps } from \"./Tabs\";\r\nvar classNames = require('classnames');\r\n\r\nexport const TabGroup: React.FC<TabGroupProps> = ({ tabs }) => {\r\n    const [ currentTabIdx, setCurrentTabIdx ] = useState(0);\r\n\r\n    let cn = classNames();\r\n    \r\n    return <div className={styles.tab_group}>\r\n        <div className={styles.tab_item_row}>\r\n            {tabs.map((tab, tabIdx) => (\r\n                <TabItem key={tabIdx}\r\n                    label={tab.label}\r\n                    selected={currentTabIdx === tabIdx}\r\n                    onTabClick={() => setCurrentTabIdx(tabIdx)}\r\n                />\r\n            ))}\r\n        </div>\r\n        <div className={styles.content}>\r\n            {tabs[currentTabIdx].content}\r\n        </div>\r\n    </div>\r\n}","import React from \"react\";\r\nimport { IControlFunctions } from \"../globals\";\r\nimport { Controls } from \"./Controls/Controls\";\r\nimport styles from './Sidebar.module.scss';\r\nimport { TabGroup } from \"./Tabs/TabGroup\";\r\nimport { ITabValues } from \"./Tabs/Tabs\";\r\nvar classNames = require('classnames');\r\n\r\nexport interface SidebarProps { \r\n    controlFunctions: React.MutableRefObject<IControlFunctions>;\r\n}\r\n\r\nexport const Sidebar: React.FC<SidebarProps> = ({ controlFunctions }) => {\r\n    let cn = classNames(\r\n        styles.controls\r\n    );\r\n\r\n    const tabs: ITabValues = [\r\n        {\r\n            label: \"Controls\",\r\n            content: <Controls controlFunctions={controlFunctions} />\r\n        },\r\n        {\r\n            label: \"Structures\",\r\n            content: <>YO</>\r\n        }\r\n    ]\r\n\r\n    return <div className={cn}>\r\n        <TabGroup tabs={tabs} />\r\n    </div>\r\n}","import { CellType } from \"../globals\";\r\n\r\nconst isOob = (grid: CellType[][], row: number, col: number): boolean => {\r\n    return row < 0 || col < 0 || row >= grid.length || col >= grid[row].length;\r\n}\r\n\r\nconst getNeighbourCountGrid = (grid: CellType[][]): number[][] => {\r\n    const o: number[][] = [];\r\n    for(let row = 0; row < grid.length; row++) {\r\n        o.push([]);\r\n        for(let col = 0; col < grid[row].length; col++) {\r\n            o[row].push(0);\r\n        }\r\n    }\r\n\r\n    for(let row = 0; row < grid.length; row++) {\r\n        for(let col = 0; col < grid[row].length; col++) {\r\n            if(grid[row][col] === 'dead') continue;\r\n\r\n            /* \r\n                0 1 2\r\n                3 4 5\r\n                6 7 8\r\n                where 4 is the current cell.\r\n            */\r\n            for(let m = 0; m < 9; m++) {\r\n                const [newRow, newCol] = [row + Math.floor(m / 3)-1, col + m % 3-1];\r\n                if(m !== 4 && !isOob(grid, newRow, newCol)) {\r\n                    o[newRow][newCol]++;\r\n                }\r\n            }\r\n        }\r\n    }\r\n    return o;\r\n}\r\n\r\nconst isAlive = (current: CellType, neighbours: number): boolean => {\r\n    return current === 'dead' ? (neighbours === 3) : (neighbours === 2 || neighbours === 3);\r\n}\r\n\r\nexport const getNext = (grid: CellType[][]): CellType[][] => {\r\n    const o: CellType[][] = [];\r\n    const neighbourCountGrid = getNeighbourCountGrid(grid);\r\n    \r\n    for(let row = 0; row < grid.length; row++) {\r\n        o.push([]);\r\n        for(let col = 0; col < grid[row].length; col++) {\r\n            const r: CellType = isAlive(grid[row][col], neighbourCountGrid[row][col]) ? 'alive' : 'dead'; \r\n            o[row].push(r);\r\n        }\r\n    }\r\n\r\n    return o;\r\n}","import React, { useEffect, useRef, useState } from \"react\";\r\nimport { getNext } from \"../algorithms/Cgol\";\r\nimport { CellType, CELL_HEIGHT, GridDimensions, GRID_MARGIN, ICell, IControlFunctions } from \"../globals\";\r\n\r\nimport styles from './Grid.module.scss';\r\nvar classNames = require('classnames');\r\n\r\nexport interface GridProps {\r\n    controlFunctions: React.MutableRefObject<IControlFunctions>;\r\n}\r\n\r\nexport const Grid: React.FC<GridProps> = ({ controlFunctions }) => {\r\n    const [ gridDimensions, setGridDimensions ] = useState<GridDimensions>(getWindowDimensions());\r\n    const [ grid, setGrid ] = useState<CellType[][]>(getInitialGrid(gridDimensions));\r\n    const [ currentDrag, setCurrentDrag ] = useState<CellType | null>(null);\r\n    const gridHistory = useRef<CellType[][][]>([]);\r\n\r\n    // Re-write - decide on if we're doing per cell or per grid\r\n    const updateCells = (cells: ICell[]): void => {\r\n        if(cells.length === 0) return;\r\n        // TODO update history\r\n        setGrid(currentGrid => {\r\n            const newGrid = copyGrid(currentGrid);\r\n            cells.forEach(cell => {\r\n                newGrid[cell.row][cell.col] = cell.type;\r\n            })\r\n            return newGrid;\r\n        });\r\n    }\r\n\r\n    const updateGrid = (newGrid: CellType[][]): void => {\r\n        gridHistory.current.push(grid);\r\n        setGrid(newGrid);\r\n    }\r\n\r\n    const advanceGrid = (): void => {\r\n        gridHistory.current.push(grid);\r\n        setGrid(currentGrid => getNext(currentGrid));\r\n    }\r\n\r\n    const undo = (): void => {\r\n        const prevState = gridHistory.current.pop();\r\n        if(!prevState) return;\r\n        setGrid(prevState);\r\n    }\r\n\r\n    const clearHistory = (): void => {\r\n        gridHistory.current = [];\r\n    }\r\n\r\n    const randomiseGrid = (): void => {\r\n        updateGrid(getRandomGrid(gridDimensions));\r\n        clearHistory();\r\n    }\r\n\r\n    const resetGrid = (): void => {\r\n        updateGrid(getInitialGrid(gridDimensions));\r\n        clearHistory();\r\n    }\r\n\r\n    const endDrag = (): void => {\r\n        setCurrentDrag(null);\r\n    }\r\n    \r\n    controlFunctions.current.advance = advanceGrid;\r\n    controlFunctions.current.undo = undo;\r\n    controlFunctions.current.clearHistory = clearHistory;\r\n    controlFunctions.current.randomise = randomiseGrid;\r\n    controlFunctions.current.reset = resetGrid;\r\n\r\n    const handleMouseDown = (e: React.MouseEvent<HTMLDivElement>, rowIdx: number, colIdx: number): void => {\r\n        gridHistory.current.push(grid);\r\n        const newDrag = grid[rowIdx][colIdx] === 'alive' ? 'dead' : 'alive';\r\n        setCurrentDrag(newDrag);\r\n        updateCells([{\r\n            type: newDrag, \r\n            row: rowIdx, \r\n            col: colIdx\r\n        }])\r\n    }\r\n\r\n    const handleMouseUp = (e: React.MouseEvent<HTMLDivElement, MouseEvent>, rowIdx: number, colIdx: number): void => {\r\n        endDrag();\r\n    }\r\n\r\n    const handleMouseMove = (e: React.MouseEvent<HTMLDivElement>, rowIdx: number, colIdx: number): void => {\r\n        console.log();\r\n        if(currentDrag === null || currentDrag === grid[rowIdx][colIdx]) return;\r\n        \r\n        // Fixes if you hold click and then leave the grid - checks to make sure there are buttons held down on return.\r\n        if(e.buttons === 0) {\r\n            endDrag();\r\n            return;\r\n        }\r\n        \r\n        updateCells([{\r\n            type: currentDrag, \r\n            row: rowIdx, \r\n            col: colIdx\r\n        }])\r\n    }\r\n\r\n    const handleKeyDown = (e: KeyboardEvent): void => {\r\n        if(e.key !== ' ') return;\r\n        advanceGrid();\r\n    }\r\n\r\n    useEffect(() => {\r\n        document.addEventListener('keydown', handleKeyDown);\r\n    }, []);\r\n\r\n\r\n    return <div className={styles.grid}>\r\n        {grid.map((row, rowIdx) => (\r\n            <div className={styles.row} key={rowIdx}>\r\n                {row.map((cellValue, colIdx) => {\r\n                    const cellCN = classNames(styles.cell, {\r\n                        [styles.active]: cellValue === 'alive',\r\n                        [styles.dead]: cellValue === 'dead'\r\n                    })\r\n                    \r\n                    return <div \r\n                        className={cellCN} \r\n                        key={`${rowIdx} ${colIdx}`} \r\n                        onMouseDown={(e) => handleMouseDown(e, rowIdx, colIdx)}\r\n                        onMouseUp={(e) => handleMouseUp(e, rowIdx, colIdx)}\r\n                        onMouseMove={(e) => handleMouseMove(e, rowIdx, colIdx)}\r\n                    />\r\n                })}\r\n            </div>\r\n        ))}\r\n    </div>\r\n}\r\n\r\n// Get dimensions of the grid based on the window size\r\nconst getWindowDimensions = (): GridDimensions => {\r\n    const { innerWidth: width, innerHeight: height } = window;\r\n    return {\r\n        width: Math.floor((width-GRID_MARGIN*2)/CELL_HEIGHT*0.6), \r\n        height: Math.floor((height-GRID_MARGIN*2)/CELL_HEIGHT)\r\n    };\r\n}\r\n\r\n// Return a default, dead grid.\r\nconst getInitialGrid = (dimensions: GridDimensions): CellType[][] => {\r\n    const o: CellType[][] = [];\r\n\r\n    for (let row = 0; row < dimensions.height; row++) {\r\n      o.push([]);\r\n      for (let col = 0; col < dimensions.width; col++) {\r\n        o[row].push('dead');\r\n      }\r\n    }\r\n    return o;\r\n}\r\n\r\nconst getRandomCell = (): CellType => Math.random() < 0.5 ? 'alive' : 'dead';\r\n\r\nconst getRandomGrid = (dimensions: GridDimensions): CellType[][] => {\r\n    const o: CellType[][] = [];\r\n\r\n    for (let row = 0; row < dimensions.height; row++) {\r\n      o.push([]);\r\n      for (let col = 0; col < dimensions.width; col++) {\r\n        o[row].push(getRandomCell());\r\n      }\r\n    }\r\n    return o;\r\n}\r\n\r\n// Deep copy\r\nconst copyGrid = (g: any[][]): any[][] => {\r\n    return g.map(a => a.slice());\r\n}","\r\nexport const CELL_TYPES = ['dead', 'alive'] as const;\r\nexport type CellType = typeof CELL_TYPES[number];\r\nexport interface ICell {\r\n    type: CellType;\r\n    row: number;\r\n    col: number;\r\n}\r\n\r\nexport const CELL_HEIGHT = 22;\r\nexport const GRID_MARGIN = 20;\r\n\r\nexport type GridDimensions = {\r\n    width: Number;\r\n    height: Number;\r\n};\r\n\r\nexport interface IControlFunctions {\r\n  advance: (() => void) | undefined;\r\n  undo: (() => void) | undefined;\r\n  clearHistory: (() => void) | undefined;\r\n  randomise: (() => void) | undefined;\r\n  reset: (() => void) | undefined;\r\n}","import React, { useRef } from 'react';\nimport styles from './App.module.scss';\nimport { Sidebar } from './Sidebar/Sidebar';\nimport { Grid } from './Grid/Grid';\nimport { IControlFunctions } from './globals';\n\n\nfunction App() {\n  const controlFunctions = useRef<IControlFunctions>({\n    advance: undefined,\n    undo: undefined,\n    clearHistory: undefined,\n    randomise: undefined,\n    reset: undefined\n  });\n  \n  return (\n    <div className={styles.App}>\n      <Grid controlFunctions={controlFunctions} />\n      <Sidebar controlFunctions={controlFunctions} />\n    </div>\n  );\n}\n\nexport default App;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  // <React.StrictMode>\n    <App />,\n  // </React.StrictMode>,\n  document.getElementById('root')\n);"],"sourceRoot":""}