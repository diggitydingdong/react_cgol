{"version":3,"sources":["Cgol.tsx","Grid.tsx","App.tsx","index.tsx"],"names":["isOob","grid","row","col","length","getNext","current","neighbours","o","neighbourCountGrid","push","m","newRow","Math","floor","newCol","getNeighbourCountGrid","r","copyGrid","g","map","a","slice","Grid","width","height","useState","getGrid","setGrid","gridHistory","useRef","console","log","addToHistory","advanceGOL","currentGrid","handleKeyPress","e","key","useEffect","document","addEventListener","id","onClick","prev","pop","undefined","devanceGOL","rowIdx","className","cellValue","colIdx","onMouseDown","newGrid","handleClick","App","ReactDOM","render","getElementById"],"mappings":"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","file":"static/js/main.c2795a55.chunk.js","sourcesContent":["export const CELL_TYPES = ['dead', 'alive'] as const;\r\nexport type CellType = typeof CELL_TYPES[number];\r\n\r\nconst isOob = (grid: CellType[][], row: number, col: number): boolean => {\r\n    return row < 0 || col < 0 || row >= grid.length || col >= grid[row].length;\r\n}\r\n\r\nconst getNeighbourCountGrid = (grid: CellType[][]): number[][] => {\r\n    const o: number[][] = [];\r\n    for(let row = 0; row < grid.length; row++) {\r\n        o.push([]);\r\n        for(let col = 0; col < grid[row].length; col++) {\r\n            o[row].push(0);\r\n        }\r\n    }\r\n\r\n    for(let row = 0; row < grid.length; row++) {\r\n        for(let col = 0; col < grid[row].length; col++) {\r\n            if(grid[row][col] === 'dead') continue;\r\n\r\n            /* \r\n                0 1 2\r\n                3 4 5\r\n                6 7 8\r\n                where 4 is the current cell.\r\n            */\r\n            for(let m = 0; m < 9; m++) {\r\n                const [newRow, newCol] = [row + Math.floor(m / 3)-1, col + m % 3-1];\r\n                if(m !== 4 && !isOob(grid, newRow, newCol)) {\r\n                    o[newRow][newCol]++;\r\n                }\r\n            }\r\n        }\r\n    }\r\n    return o;\r\n}\r\n\r\nconst isAlive = (current: CellType, neighbours: number): boolean => {\r\n    return current === 'dead' ? (neighbours === 3) : (neighbours === 2 || neighbours === 3);\r\n}\r\n\r\nexport const getNext = (grid: CellType[][]): CellType[][] => {\r\n    const o: CellType[][] = [];\r\n    const neighbourCountGrid = getNeighbourCountGrid(grid);\r\n    \r\n    for(let row = 0; row < grid.length; row++) {\r\n        o.push([]);\r\n        for(let col = 0; col < grid[row].length; col++) {\r\n            const r: CellType = isAlive(grid[row][col], neighbourCountGrid[row][col]) ? 'alive' : 'dead'; \r\n            o[row].push(r);\r\n        }\r\n    }\r\n\r\n    return o;\r\n}","import React, { useEffect, useRef, useState } from \"react\";\r\nimport { CellType, getNext } from \"./Cgol\";\r\nimport './Grid.css';\r\n\r\nexport interface GridProps {\r\n    width: number;\r\n    height: number;\r\n}\r\n\r\nconst timeBetween = 2000;\r\n\r\n// Return a default, dead grid.\r\nfunction getGrid(width: number, height: number): CellType[][] {\r\n    const o: CellType[][] = [];\r\n    for (let row = 0; row < height; row++) {\r\n      o.push([]);\r\n      for (let col = 0; col < width; col++) {\r\n        o[row].push('dead');\r\n      }\r\n    }\r\n    return o;\r\n}\r\n\r\nfunction copyGrid(g: any[][]): any[][] {\r\n    return g.map(a => a.slice());\r\n}\r\n\r\nexport const Grid: React.FC<GridProps> = ({ width, height }) => {\r\n    const [ grid, setGrid ] = useState<CellType[][]>(getGrid(width, height));\r\n    // const intervalRef = useRef<NodeJS.Timeout>();\r\n    const gridHistory = useRef<CellType[][][]>([]);\r\n    console.log(gridHistory.current.length);\r\n\r\n    // useEffect(() => {\r\n    //     const id = setInterval(() => {\r\n    //         setGrid(currGrid => getNext(currGrid));\r\n    //     }, timeBetween);\r\n    //     intervalRef.current = id;\r\n    // }, [])\r\n\r\n    const addToHistory = (grid: CellType[][]): void => {\r\n        // TODO check if most recent is identical if so dont add\r\n        gridHistory.current.push(grid);\r\n    }\r\n\r\n    const advanceGOL = (): void => {\r\n        setGrid(currentGrid => {\r\n            addToHistory(copyGrid(currentGrid));\r\n            return getNext(currentGrid)\r\n        });\r\n    }\r\n\r\n    const handleKeyPress = (e: KeyboardEvent): void => {\r\n        if(e.key !== ' ') return;\r\n        advanceGOL();\r\n    }\r\n\r\n    const devanceGOL = (): void => {\r\n        const prev = gridHistory.current.pop();\r\n        if(prev === undefined) return;\r\n        setGrid(prev);\r\n    }\r\n\r\n    useEffect(() => {\r\n        document.addEventListener('keydown', handleKeyPress);\r\n      }, []);\r\n\r\n    const handleClick = (rowIdx: number, colIdx: number): void => {\r\n        setGrid(currentGrid => {\r\n            addToHistory(copyGrid(currentGrid));\r\n            const newGrid: CellType[][] = copyGrid(currentGrid);\r\n            newGrid[rowIdx][colIdx] = (newGrid[rowIdx][colIdx] === 'alive' ? 'dead' : 'alive');\r\n            return newGrid;\r\n        })\r\n    }\r\n\r\n    return <div id=\"grid\">\r\n        <button onClick={(): void => {devanceGOL()}}>GO BACK!!</button>\r\n        <button onClick={(): void => {advanceGOL()}}>ADVANCE</button>\r\n        {grid.map((row, rowIdx) => (\r\n            <div className={\"row\"} key={rowIdx}>\r\n                {row.map((cellValue, colIdx) => (\r\n                    <div className={\"cell \" + cellValue} key={`${rowIdx} ${colIdx}`} onMouseDown={(e): void => handleClick(rowIdx, colIdx)} />\r\n                ))}\r\n            </div>\r\n        ))}\r\n    </div>\r\n}","import React from 'react';\nimport './App.css';\nimport { Grid } from './Grid';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Grid width={80} height={80} />\n    </div>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  // <React.StrictMode>\n    <App />,\n  // </React.StrictMode>,\n  document.getElementById('root')\n);"],"sourceRoot":""}