{"version":3,"sources":["Cgol.tsx","Grid.tsx","App.tsx","index.tsx"],"names":["isOob","grid","row","col","length","getNext","current","neighbours","o","neighbourCountGrid","push","m","newRow","Math","floor","newCol","getNeighbourCountGrid","r","console","log","Grid","width","height","useState","getGrid","setGrid","advanceGOL","useRef","e","key","currGrid","useEffect","document","addEventListener","id","onClick","map","rowIdx","className","cellValue","colIdx","onMouseDown","currentGrid","newGrid","a","slice","handleClick","App","ReactDOM","render","StrictMode","getElementById"],"mappings":"qOAGMA,EAAQ,SAACC,EAAoBC,EAAaC,GAC5C,OAAOD,EAAM,GAAKC,EAAM,GAAKD,GAAOD,EAAKG,QAAUD,GAAOF,EAAKC,GAAKE,QAsC3DC,EAAU,SAACJ,GAIpB,IAHA,IANaK,EAAmBC,EAM1BC,EAAkB,GAClBC,EArCoB,SAACR,GAE3B,IADA,IAAMO,EAAgB,GACdN,EAAM,EAAGA,EAAMD,EAAKG,OAAQF,IAAO,CACvCM,EAAEE,KAAK,IACP,IAAI,IAAIP,EAAM,EAAGA,EAAMF,EAAKC,GAAKE,OAAQD,IACrCK,EAAEN,GAAKQ,KAAK,GAIpB,IAAI,IAAIR,EAAM,EAAGA,EAAMD,EAAKG,OAAQF,IAChC,IAAI,IAAIC,EAAM,EAAGA,EAAMF,EAAKC,GAAKE,OAAQD,IACrC,GAAsB,SAAnBF,EAAKC,GAAKC,GAQb,IAAI,IAAIQ,EAAI,EAAGA,EAAI,EAAGA,IAAK,CACvB,IAAOC,EAAmBV,EAAMW,KAAKC,MAAMH,EAAI,GAAG,EAAnCI,EAAsCZ,EAAMQ,EAAI,EAAE,EACxD,IAANA,GAAYX,EAAMC,EAAMW,EAAQG,IAC/BP,EAAEI,GAAQG,KAK1B,OAAOP,EAUoBQ,CAAsBf,GAEzCC,EAAM,EAAGA,EAAMD,EAAKG,OAAQF,IAAO,CACvCM,EAAEE,KAAK,IACP,IAAI,IAAIP,EAAM,EAAGA,EAAMF,EAAKC,GAAKE,OAAQD,IAAO,CAC5C,IAAMc,GAZDX,EAYuBL,EAAKC,GAAKC,GAZdI,EAYoBE,EAAmBP,GAAKC,GAX5Ee,QAAQC,IAAIb,EAASC,IACF,SAAZD,EAAqC,IAAfC,EAAoC,IAAfA,GAAmC,IAAfA,GAUc,QAAU,QACtFC,EAAEN,GAAKQ,KAAKO,IAMpB,OAHAC,QAAQC,IAAIV,GACZS,QAAQC,IAAIX,GAELA,G,eCjCJ,IAAMY,EAA4B,SAAC,GAAuB,IAArBC,EAAoB,EAApBA,MAAOC,EAAa,EAAbA,OAC/C,EAA0BC,mBAZ9B,SAAiBF,EAAeC,GAE5B,IADA,IAAMd,EAAkB,GACfN,EAAM,EAAGA,EAAMoB,EAAQpB,IAAO,CACrCM,EAAEE,KAAK,IACP,IAAK,IAAIP,EAAM,EAAGA,EAAMkB,EAAOlB,IAC7BK,EAAEN,GAAKQ,KAAK,QAGhB,OAAOF,EAI0CgB,CAAQH,EAAOC,IAAhE,mBAAQrB,EAAR,KAAcwB,EAAd,KAUMC,GATcC,mBASD,SAACC,GACH,MAAVA,EAAEC,KAELJ,GAAQ,SAAAK,GAAQ,OAAIzB,EAAQyB,QAGhCC,qBAAU,WACNC,SAASC,iBAAiB,UAAWP,KACpC,IAUL,OAAO,sBAAKQ,GAAG,OAAR,UACH,wBAAQC,QAAS,WAAOV,GAAQ,SAAAK,GAAQ,OAAIzB,EAAQyB,OAApD,qBACC7B,EAAKmC,KAAI,SAAClC,EAAKmC,GAAN,OACN,qBAAKC,UAAW,MAAhB,SACKpC,EAAIkC,KAAI,SAACG,EAAWC,GAAZ,OACL,qBAAKF,UAAW,QAAUC,EAAuCE,YAAa,SAACb,GAAD,OAb1E,SAACS,EAAgBG,GACjCf,GAAQ,SAAAiB,GACJ,IAAMC,EAAwBD,EAAYN,KAAI,SAAAQ,GAAC,OAAIA,EAAEC,WAErD,OADAF,EAAQN,GAAQG,GAAU,QACnBG,KASsFG,CAAYT,EAAQG,KAAzG,UAA6CH,EAA7C,YAAuDG,QAFnCH,UC3CzBU,MARf,WACE,OACE,qBAAKT,UAAU,MAAf,SACE,cAAC,EAAD,CAAMjB,MAAO,GAAIC,OAAQ,QCF/B0B,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFlB,SAASmB,eAAe,W","file":"static/js/main.82bc10e8.chunk.js","sourcesContent":["export const CELL_TYPES = ['dead', 'alive'] as const;\r\nexport type CellType = typeof CELL_TYPES[number];\r\n\r\nconst isOob = (grid: CellType[][], row: number, col: number): boolean => {\r\n    return row < 0 || col < 0 || row >= grid.length || col >= grid[row].length;\r\n}\r\n\r\nconst getNeighbourCountGrid = (grid: CellType[][]): number[][] => {\r\n    const o: number[][] = [];\r\n    for(let row = 0; row < grid.length; row++) {\r\n        o.push([]);\r\n        for(let col = 0; col < grid[row].length; col++) {\r\n            o[row].push(0);\r\n        }\r\n    }\r\n\r\n    for(let row = 0; row < grid.length; row++) {\r\n        for(let col = 0; col < grid[row].length; col++) {\r\n            if(grid[row][col] === 'dead') continue;\r\n\r\n            /* \r\n                0 1 2\r\n                3 4 5\r\n                6 7 8\r\n                where 4 is the current cell.\r\n            */\r\n            for(let m = 0; m < 9; m++) {\r\n                const [newRow, newCol] = [row + Math.floor(m / 3)-1, col + m % 3-1];\r\n                if(m !== 4 && !isOob(grid, newRow, newCol)) {\r\n                    o[newRow][newCol]++;\r\n                }\r\n            }\r\n        }\r\n    }\r\n    return o;\r\n}\r\n\r\nconst isAlive = (current: CellType, neighbours: number): boolean => {\r\n    console.log(current, neighbours);\r\n    return current === 'dead' ? (neighbours === 3) : (neighbours === 2 || neighbours === 3);\r\n}\r\n\r\nexport const getNext = (grid: CellType[][]): CellType[][] => {\r\n    const o: CellType[][] = [];\r\n    const neighbourCountGrid = getNeighbourCountGrid(grid);\r\n    \r\n    for(let row = 0; row < grid.length; row++) {\r\n        o.push([]);\r\n        for(let col = 0; col < grid[row].length; col++) {\r\n            const r: CellType = isAlive(grid[row][col], neighbourCountGrid[row][col]) ? 'alive' : 'dead'; \r\n            o[row].push(r);\r\n        }\r\n    }\r\n    console.log(neighbourCountGrid);\r\n    console.log(o);\r\n\r\n    return o;\r\n}","import React, { useEffect, useRef, useState } from \"react\";\r\nimport { CellType, getNext } from \"./Cgol\";\r\nimport './Grid.css';\r\n\r\nexport interface GridProps {\r\n    width: number;\r\n    height: number;\r\n}\r\n\r\nconst timeBetween = 2000;\r\n\r\n// Return a default, dead grid.\r\nfunction getGrid(width: number, height: number): CellType[][] {\r\n    const o: CellType[][] = [];\r\n    for (let row = 0; row < height; row++) {\r\n      o.push([]);\r\n      for (let col = 0; col < width; col++) {\r\n        o[row].push('dead');\r\n      }\r\n    }\r\n    return o;\r\n}\r\n\r\nexport const Grid: React.FC<GridProps> = ({ width, height }) => {\r\n    const [ grid, setGrid ] = useState<CellType[][]>(getGrid(width, height));\r\n    const intervalRef = useRef<NodeJS.Timeout>();\r\n    \r\n    // useEffect(() => {\r\n    //     const id = setInterval(() => {\r\n    //         setGrid(currGrid => getNext(currGrid));\r\n    //     }, timeBetween);\r\n    //     intervalRef.current = id;\r\n    // }, [])\r\n\r\n    const advanceGOL = (e: KeyboardEvent) => {\r\n        if(e.key !== ' ') return;\r\n\r\n        setGrid(currGrid => getNext(currGrid));\r\n    }\r\n\r\n    useEffect(() => {\r\n        document.addEventListener('keydown', advanceGOL);\r\n      }, []);\r\n\r\n    const handleClick = (rowIdx: number, colIdx: number): void => {\r\n        setGrid(currentGrid => {\r\n            const newGrid: CellType[][] = currentGrid.map(a => a.slice());\r\n            newGrid[rowIdx][colIdx] = 'alive';\r\n            return newGrid;\r\n        })\r\n    }\r\n\r\n    return <div id=\"grid\">\r\n        <button onClick={() => {setGrid(currGrid => getNext(currGrid))}}>ADVANCE</button>\r\n        {grid.map((row, rowIdx) => (\r\n            <div className={\"row\"} key={rowIdx}>\r\n                {row.map((cellValue, colIdx) => (\r\n                    <div className={\"cell \" + cellValue} key={`${rowIdx} ${colIdx}`} onMouseDown={(e) => handleClick(rowIdx, colIdx)} />\r\n                ))}\r\n            </div>\r\n        ))}\r\n    </div>\r\n}","import React from 'react';\nimport './App.css';\nimport { Grid } from './Grid';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Grid width={40} height={40} />\n    </div>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);"],"sourceRoot":""}